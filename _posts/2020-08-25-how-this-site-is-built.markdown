---
layout: post
title:  "How this site is built"
author: Wu, Lei
date:   2020-08-25 13:37:00 +0300
categories: development web
tags: [web, jekyll]
---

This article briefly talks about how this blog site is built, customized and maintained with Jekyll and GitHub Pages.

## Prerequisites

Basically, the prerequisite of the site is Jekyll, the static site generator.

For a Windows machine, like the author uses for setting up this site, install the Chocolatey, a package manager that lets you download and install open-source software.

One possible way to do that is to use the code below, in the Command Prompt.

```
@powershell -NoProfile -ExecutionPolicy unrestricted -Command "(iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))) >$null 2>&1" && SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
```

Now it is available to install ruby in a command line, e.g. Git Bash, as such: `choco install ruby -y`. 

After restarting the command line, finally, it is OK to install Jekyll, the software for the actual site generation, and bundler, a Ruby dependecy management that reduces Jekyll build errors, and prevents environment-related bugs.

```
gem install jekyll bundler
```

## Set up

### Jekyll initialize

With the dependencies installed above, it is quite easy to kick-off a new jekyll site, in my case "Serpent Slayer", at the lcoal machine.

```
jekyll new serpent-slayer
```

To view the actual contents generated by Jekyll, just enter the newly created directory

```
cd serpent-slayer
```

### Jekyll local run

Here is the starting point to work on the site. A preview of the site can be lauched by the following, which also watch for changes to the websiteâ€™s files, except the `_config.yml`.

```
bundle exec jekyll serve --watch
```

The local running site can be accessed from `localhost:4000` by default. Each time when some changes are to be applied, we can always try it out here, before publishing those changes.

### Hosting on GitHub Pages

Including the site project, namely `serpent-slayer` for my case, in the git version control system and push it to GitHub, will start the process of publishing the site.

Create a branch called `gh-pages` from the default `master` branch, will allow the GitHub automatically host the site for us, which can be easily accessed at `https://<github-username>.github.io/serpent-slayer/`. Note that, a small tweak here is to update the `baseurl` and `url` in the `_config.yml` file to match expected behavior. For this example, it would be `baseurl: "/serpent-slayer"` and `url: "https://<github-username>.github.io"`.

## Customization

Choosing a good theme would deliver the site in a nicer and more personal taste. My choice is the [Hamilton theme](https://github.com/ngzhio/jekyll-theme-hamilton), which has detailed instructions for installation and configuration. I guess there is no need to repeat here.

## Write and maintain

Above is the begining of fun for blogging. The work ahead is to have pages and posts describing interesting stuff.

### Pages

It is always possible to add a separate page, just like the about page. Just add a file under the site project root, like `about.markdown`. Inside it, insert the front matter as below.

```
---
layout: page
title: About
permalink: /about/
---
```

Contents of the page come after the front matter. That's it. To have a proper navigation that links to the page, include the following file `_data/navigation.yml` with contents like:

```
- title: About
  url: /about/
```

Then the link to the about page can be seen at the top right corner of the site home page.
 
 
### Posts

Writing a post just like this one is straightforward as well. Prepare a draft of the post and put it in a file under `_posts` with the file name following the pattern of `20xx-xx-xx-your-post-title.markdown`. 

The next step is to include a front matter as below.

```
---
layout: post
title:  "Welcome to Jekyll!"
date:   2020-08-26 10:55:18 +0300
categories: jekyll update
---
```

After checking the post looks good on the local run, feel free to push the changes into the `gh-pages` branch to publish.

The above are the basics to compose and maintain a blog of the same style.

## References

[Setting up a GitHub Pages site with Jekyll](https://docs.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll)

[Building staic sites with Jekyll and GitHub pages](https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages#mini-cheatsheet-)
